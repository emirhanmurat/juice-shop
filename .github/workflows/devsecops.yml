name: JuiceShop DevSecOps Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-sbom:
    runs-on: ubuntu-latest
    outputs:
      sbom-path: ${{ steps.generate-sbom.outputs.sbom-file }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker build -t juiceshop .

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        id: generate-sbom
        run: |
          syft juiceshop -o json > sbom.json
          echo "::set-output name=sbom-file::sbom.json"

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  semgrep-scan:
    needs: build-sbom
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Semgrep via pip
        run: pip3 install semgrep

      - name: Run Semgrep SaaS-security Scan
        run: |
          semgrep --config 'auto' --sarif -o semgrep-results.sarif .

      - name: Upload Semgrep SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.sarif

  gitleaks-scan:
    needs: [build-sbom, semgrep-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --source=. --report-format=sarif --report-path=gitleaks-report.sarif

      - name: Upload GitLeaks SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.sarif

  dast-scan:
    needs: [gitleaks-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install OWASP ZAP
        run: |
          sudo apt-get update
          sudo apt-get install -y zaproxy

      - name: Start OWASP ZAP
        run: |
          zaproxy -daemon -port 8080 &

      - name: Run ZAP Scan
        run: |
          curl -s -o zap-report.xml http://localhost:8080/JSON/ascan/action/scan/?url=http://localhost:3000

      - name: Download ZAP Report in XML Format
        run: |
          curl -s -o zap-report.xml http://localhost:8080/JSON/core/other/xmlreport/

      - name: Upload ZAP Report Artifact (XML)
        uses: actions/upload-artifact@v4
        with:
          name: zap-report-xml
          path: zap-report.xml

  dummy-deploy:
    needs: [dast-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy Dummy Application (Simulated)
        run: |
          echo "Deploying dummy application..."
          # Simulating the deployment with a simple log message
          echo "Deployment successful!"
      
      - name: Verify Deployment (Dummy Step)
        run: |
          echo "Verifying dummy deployment..."
          echo "Dummy deployment verification passed."

      - name: Upload Dummy Deployment Log
        uses: actions/upload-artifact@v4
        with:
          name: dummy-deployment-log
          path: deployment-log.txt
